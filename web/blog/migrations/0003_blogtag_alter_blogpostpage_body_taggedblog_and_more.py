# Generated by Django 5.1.2 on 2025-06-29 12:20

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("blog", "0002_alter_blogindexpage_options_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        max_length=100,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog tag",
                "verbose_name_plural": "Blog tags",
            },
        ),
        migrations.AlterField(
            model_name="blogpostpage",
            name="body",
            field=wagtail.fields.StreamField(
                [("heading", 0), ("paragraph", 1), ("image", 2), ("about_block", 6)],
                blank=True,
                block_lookup={
                    0: ("wagtail.blocks.CharBlock", (), {}),
                    1: ("wagtail.blocks.RichTextBlock", (), {}),
                    2: ("wagtail.images.blocks.ImageBlock", [], {}),
                    3: (
                        "wagtail.blocks.ChoiceBlock",
                        [],
                        {
                            "choices": [
                                ("python", "Python"),
                                ("javascript", "JavaScript"),
                                ("docker", "Docker"),
                            ],
                            "help_text": "",
                        },
                    ),
                    4: (
                        "wagtail.blocks.TextBlock",
                        (),
                        {"help_text": "The code snippet", "required": True},
                    ),
                    5: (
                        "wagtail.blocks.CharBlock",
                        (),
                        {"help_text": "Caption for code snippet", "required": False},
                    ),
                    6: (
                        "wagtail.blocks.StructBlock",
                        [[("language", 3), ("content", 4), ("caption", 5)]],
                        {},
                    ),
                },
            ),
        ),
        migrations.CreateModel(
            name="TaggedBlog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="blog.blogpostpage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_blogs",
                        to="blog.blogtag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="blogpostpage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="blog.TaggedBlog",
                to="blog.BlogTag",
                verbose_name="Tags",
            ),
        ),
    ]
